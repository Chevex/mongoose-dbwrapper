0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.3.25
3 info using node@v0.10.24
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/chford/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
12 verbose folder .
13 info prepublish mongoose-simpledb@1.3.3
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/chford/.npm/1f1177db-tar.lock
16 silly lockFile 49fd9594-34454-0-4509782155510038-tmp-tgz tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
17 verbose lock tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz /Users/chford/.npm/49fd9594-34454-0-4509782155510038-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 49fd9594-34454-0-4509782155510038-tmp-tgz tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
21 silly lockFile 49fd9594-34454-0-4509782155510038-tmp-tgz tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
22 verbose tar unpack /var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
23 silly lockFile a961a9d3-34454-0-4509782155510038-package tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
24 verbose lock tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package /Users/chford/.npm/a961a9d3-34454-0-4509782155510038-package.lock
25 silly lockFile 49fd9594-34454-0-4509782155510038-tmp-tgz tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
26 verbose lock tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz /Users/chford/.npm/49fd9594-34454-0-4509782155510038-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry index.js
32 silly gunzTarPerm extractEntry .travis.yml
33 silly gunzTarPerm extractEntry test/test.js
34 silly gunzTarPerm extractEntry test/dbmodels/Author.js
35 silly gunzTarPerm extractEntry test/dbmodels/Book.js
36 silly gunzTarPerm extractEntry test/mocha.opts
37 silly lockFile a961a9d3-34454-0-4509782155510038-package tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
38 silly lockFile a961a9d3-34454-0-4509782155510038-package tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
39 silly lockFile 49fd9594-34454-0-4509782155510038-tmp-tgz tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
40 silly lockFile 49fd9594-34454-0-4509782155510038-tmp-tgz tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/tmp.tgz
41 verbose tar pack [ '/Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz',
41 verbose tar pack   '/var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package' ]
42 verbose tarball /Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
43 verbose folder /var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
44 silly lockFile a961a9d3-34454-0-4509782155510038-package tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
45 verbose lock tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package /Users/chford/.npm/a961a9d3-34454-0-4509782155510038-package.lock
46 silly lockFile 6e416ca3-goose-simpledb-1-3-3-package-tgz tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
47 verbose lock tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz /Users/chford/.npm/6e416ca3-goose-simpledb-1-3-3-package-tgz.lock
48 silly lockFile a961a9d3-34454-0-4509782155510038-package tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
49 silly lockFile a961a9d3-34454-0-4509782155510038-package tar:///var/folders/w8/qp67wf9d5fn3dzvcyk7ct1ph0000gn/T/npm-14816-fRr6ZNge/1390973734454-0.4509782155510038/package
50 silly lockFile 6e416ca3-goose-simpledb-1-3-3-package-tgz tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
51 silly lockFile 6e416ca3-goose-simpledb-1-3-3-package-tgz tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
52 silly lockFile d1028715--mongoose-simpledb-1-3-3-package /Users/chford/.npm/mongoose-simpledb/1.3.3/package
53 verbose lock /Users/chford/.npm/mongoose-simpledb/1.3.3/package /Users/chford/.npm/d1028715--mongoose-simpledb-1-3-3-package.lock
54 silly lockFile d1028715--mongoose-simpledb-1-3-3-package /Users/chford/.npm/mongoose-simpledb/1.3.3/package
55 silly lockFile d1028715--mongoose-simpledb-1-3-3-package /Users/chford/.npm/mongoose-simpledb/1.3.3/package
56 verbose tar unpack /Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
57 silly lockFile eafae05a--mongoose-simpledb-1-3-3-package tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package
58 verbose lock tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package /Users/chford/.npm/eafae05a--mongoose-simpledb-1-3-3-package.lock
59 silly lockFile 6e416ca3-goose-simpledb-1-3-3-package-tgz tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
60 verbose lock tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz /Users/chford/.npm/6e416ca3-goose-simpledb-1-3-3-package-tgz.lock
61 silly gunzTarPerm modes [ '755', '644' ]
62 silly gunzTarPerm extractEntry package.json
63 silly gunzTarPerm extractEntry .npmignore
64 silly gunzTarPerm extractEntry README.md
65 silly gunzTarPerm extractEntry index.js
66 silly gunzTarPerm extractEntry .travis.yml
67 silly gunzTarPerm extractEntry test/test.js
68 silly gunzTarPerm extractEntry test/dbmodels/Author.js
69 silly gunzTarPerm extractEntry test/dbmodels/Book.js
70 silly gunzTarPerm extractEntry test/mocha.opts
71 silly lockFile eafae05a--mongoose-simpledb-1-3-3-package tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package
72 silly lockFile eafae05a--mongoose-simpledb-1-3-3-package tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package
73 silly lockFile 6e416ca3-goose-simpledb-1-3-3-package-tgz tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
74 silly lockFile 6e416ca3-goose-simpledb-1-3-3-package-tgz tar:///Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz
75 verbose chmod /Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz 644
76 verbose chown /Users/chford/.npm/mongoose-simpledb/1.3.3/package.tgz [ 501, 20 ]
77 silly lockFile 3a52ce78- .
78 silly lockFile 3a52ce78- .
79 silly publish { name: 'mongoose-simpledb',
79 silly publish   version: '1.3.3',
79 silly publish   description: 'Simple API for defining mongoose dbmodels and loading them into a single object for easy access.',
79 silly publish   main: 'index.js',
79 silly publish   dependencies:
79 silly publish    { extend: '*',
79 silly publish      mongoose: '*',
79 silly publish      'mongoose-auto-increment': '*',
79 silly publish      async: '~0.2.9' },
79 silly publish   devDependencies: { mocha: '*', chai: '*', moment: '*', marked: '*', async: '*' },
79 silly publish   scripts: { test: 'mocha' },
79 silly publish   repository:
79 silly publish    { type: 'git',
79 silly publish      url: 'git://github.com/Chevex/mongoose-simpledb.git' },
79 silly publish   keywords: [ 'mongoose' ],
79 silly publish   author: { name: 'Alex Ford' },
79 silly publish   license: 'MIT',
79 silly publish   bugs: { url: 'https://github.com/Chevex/mongoose-simpledb/issues' },
79 silly publish   readme: '# mongoose-simpledb\n\n[![Build Status](https://travis-ci.org/chevex/mongoose-simpledb.png)](https://travis-ci.org/chevex/mongoose-simpledb)\n[![Dependencies Status](https://gemnasium.com/Chevex/mongoose-simpledb.png)](https://gemnasium.com/Chevex/mongoose-simpledb)\n[![NPM version](https://badge.fury.io/js/mongoose-simpledb.png)](http://badge.fury.io/js/mongoose-simpledb)\n\n> Simple API for defining mongoose models and loading them into a single object for easy access.\n\n## Getting Started\n\n> npm install mongoose-simpledb\n\nNote: You do not need to install mongoose. Simpledb is intended to hide mongoose so you never have to install or require it.\n\nAfter installing simpledb you\'ll want to define your mongoose models. By default simpledb looks in the root of your project for a directory called "dbmodels" and will load all model files found there. However, you can place your models wherever you wish and pass the location in simpledb\'s options. Let\'s look at an example model file.\n\n```javascript\n// dbmodels/Comment.js\n\nvar ObjectId = require(\'mongoose-simpledb\').Types.ObjectId;\n\nexports.schema = {\n    creator: { type: ObjectId, ref: \'User\' },\n    blogPost: { type: Number, ref: \'BlogPost\' },\n    url: String,\n    body: String,\n    date: { type: Date, default: Date.now },\n    editedDate: Date,\n    editedBy: { type: ObjectId, ref: \'User\' }\n};\n```\n    \nOnce you have a model file you can get reference to simpledb and call its `init` function. You can pass a callback function to `init` that will receive the `db` object when all of your models have finished being loaded into it. Or you can assign the results of the `init` function to a variable which will be lazy-loaded with your models when they are done being loaded;\n\nCallback:\n\n```javascript\nvar simpledb = require(\'mongoose-simpledb\');\nsimpledb.init(function (err, db) {\n    if (err) return console.error(err);\n    // You can safely assume that db is populated with your models.\n    db.Comment.find({ blogPost: 123 }, ...):\n});\n```\n\nLazy-loaded reference:\n\n```javascript\nvar simpledb = require(\'mongoose-simpledb\');\nvar db = simpledb.init();\n// After a time...\ndb.Comment.find({ blogPost: 123 }, ...);\n```\n\nIf you prefer to use the lazy-loaded option then you can check `db.modelsLoaded` to see if the object is ready to be used. The only requirement of a model file is that you expose a property called `schema`. simpledb will use this property when creating your Mongoose schema. While `schema` is the only required property for you to define, you can define a few others as well if you\'d like to setup instance methods, static methods, or virtual properties.\n\n## Need instance methods?\n\n```javascript\nexports.methods = {\n    dateFromNow: function () {\n        return moment(this.date).fromNow();\n    },\n    editedDateFromNow: function () {\n        return moment(this.editedDate).fromNow();\n    }\n};\n```\n\n## What about statics?\n\n```javascript\nexports.statics = {\n    tenMostRecent: function (blogPostId, callback) {\n        return this.where(\'date\').sort(\'-date\').limit(10).exec(callback);\n    }\n};\n```\n\n## Yes, you can even define virtual properties.\n\n```javascript\nexports.virtuals = {\n    bodyHtml: {\n        get: function () {\n            return marked(this.body);\n        }\n    },\n    website: {\n        get: function () {\n            return this.url;\n        },\n        set: function (url) {\n            if (!/^http:\\/\\//i.test(url))\n                url = "http://" + url;\n            this.url = url;\n        }\n    }\n};\n```\n\nYou can see that when specifying virtuals you can include both "get" and/or "set" as needed for that virtual property. You can also use dot notation with your instance methods in virtuals. Just replace the method/virtual name with a string and use dots.\n\n```javascript\n// dbmodels/Person.js\n\nexports.schema = {\n    name: {\n        first: String,\n        last: String\n    }\n};\n\nexports.virtuals = {\n    "name.full": {\n        get: function () {\n            return this.name.first + \' \' + this.name.last;\n        },\n        set: function (fullName) {\n            if (fullName.indexOf(\' \') !== -1) {\n                var segments = fullName.split(\' \');\n                this.name.first = segments[0];\n                this.name.last = segments[1];\n            } else {\n                this.name.first = fullName;\n            }\n        }\n    }\n};\n```\n\n## Options\n\nAn options object can be passed to the `init` function.\n```javascript\nsimpledb.init(options, callback);\n```\n\nAvailable Options and their default values:\n\n```javascript\n{\n    // The mongoose connection string to use.\n    connectionString: \'mongodb:\\\\localhost\',\n    // The path to the directory where your models are stored.\n    modelsDir: path.join(__dirname, \'..\', \'..\', \'dbmodels\'),\n    // Whether or not simpledb should auto-increment _id\'s of type Number.\n    autoIncrementNumberIds: true\n}\n```\n\nAny of these can be overridden as needed.\n\n---\n\n## Need a reference to `ObjectId` or other mongoose types?\n\nOne goal of simpledb is to hide mongoose so that you never have to install it or `require` it yourself. One problem with this is that sometimes you need access to mongoose\'s types. For this reason simpledb exposes `mongoose.Schema.Types` as `simpledb.Types`.\n```javascript\nvar ObjectId = require(\'mongoose-simpledb\').Types.ObjectId;\n```\n\nThen you can use it in your schemas.\n\n```javascript\nexports.schema = {\n    creator: { type: ObjectId, ref: \'User\' }\n};\n```\n\n---\n\n## Want to get rid of `ObjectId` altogether and use a simple incrementing `Number` `_id`?\n\nOe feature that Mongoose/MongoDB lack out of the box is the ability to automatically increment a simple integer ID with each new document added to the database. I wrote a mongoose plugin called [mongoose-auto-increment](http://github.com/Chevex/mongoose-auto-increment) that enables this functionality. If you explicitly declare the `_id` field on your schema as type `Number` then simpledb will automatically invoke the mongoose-auto-increment plugin for that model.\n\n```javascript\nexports.schema = {\n    _id: Number, // Causes simpledb to auto-increment _id for new documents.\n    creator: { type: Number, ref: \'User\' }\n};\n```\n\n---\n\n## Tired of passing the `db` around to other areas of your application?\n\nIn node, modules are cached after they are first grabbed with `require`. Simpledb utilizes this fact to make it extremely easy for you to access your `db` object from anywhere by simply calling `require` again. As long as you\'ve called `init` and enough time has passed for your `db` object\'s models to be loaded then you can access it.\n\n```javascript\nvar simpledb = require(\'mongoose-simpledb\');\n\nsimpledb.init(connectionString);\n\n// After a time...\n\nvar db = require(\'mongoose-simpledb\').db;\n```\n\nRemember that you can always check `db.modelsLoaded` to ensure that the object is ready to use.\n',
79 silly publish   readmeFilename: 'README.md',
79 silly publish   homepage: 'https://github.com/Chevex/mongoose-simpledb',
79 silly publish   _id: 'mongoose-simpledb@1.3.3',
79 silly publish   dist: { shasum: '052d1685e06faea080c2e6856b40e88c2318dc17' },
79 silly publish   _from: '.' }
80 verbose url raw mongoose-simpledb
81 verbose url resolving [ 'https://registry.npmjs.org/', './mongoose-simpledb' ]
82 verbose url resolved https://registry.npmjs.org/mongoose-simpledb
83 info trying registry request attempt 1 at 22:35:35
84 http PUT https://registry.npmjs.org/mongoose-simpledb
85 http 409 https://registry.npmjs.org/mongoose-simpledb
86 verbose url raw mongoose-simpledb
87 verbose url resolving [ 'https://registry.npmjs.org/', './mongoose-simpledb' ]
88 verbose url resolved https://registry.npmjs.org/mongoose-simpledb
89 info trying registry request attempt 1 at 22:35:35
90 http GET https://registry.npmjs.org/mongoose-simpledb
91 http 200 https://registry.npmjs.org/mongoose-simpledb
92 error publish fail Cannot publish over existing version.
92 error publish fail Update the 'version' field in package.json and try again.
92 error publish fail
92 error publish fail If the previous version was published in error, see:
92 error publish fail     npm help unpublish
92 error publish fail
92 error publish fail To automatically increment version numbers, see:
92 error publish fail     npm help version
93 error System Darwin 13.0.2
94 error command "node" "/usr/local/bin/npm" "publish"
95 error cwd /Users/chford/code/mongoose-simpledb
96 error node -v v0.10.24
97 error npm -v 1.3.25
98 error code EPUBLISHCONFLICT
99 verbose exit [ 1, true ]
